AWSTemplateFormatVersion: 2010-09-09

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      -
        Label:
          default: 'Network Configuration'
        Parameters:
          - RegionName
          - VpcName
          - EnableDnsSupport
          - EnableDnsHostnames
          - VpcCidrBlock
          - SubnetName
          - SubnetCidrBlock
          - SubnetAvailabilityZone
      -
        Label:
          default: 'Security Configuration'
        Parameters:
          - SecurityGroupName
          - AdministratorIpAddress
      -
        Label:
          default: 'Amazon EC2 Configuration'
        Parameters:
          - InstanceName
          - ImageId
          - InstanceType
          - VolumeSize
          - KeyName

Parameters:
  RegionName:
    Type: String
    Default: 'ap-northeast-1'
  VpcName:
    Type: String
    Default: 'my-vpc'
  EnableDnsSupport:
    Type: String
    Default: 'true'
  EnableDnsHostnames:
    Type: String
    Default: 'true'
  VpcCidrBlock:
    Type: String
    Default: 10.0.0.0/16
  SubnetName:
    Type: String
    Default: 'my-subnet'
  SubnetCidrBlock:
    Type: String
    Default: 10.0.0.0/24
  SubnetAvailabilityZone:
    Type: String
    Default: 'ap-northeast-1a'
  IamRoleName:
    Type: String
    Default: 'my-iam-role'
  S3BucketName:
    Type: String
    Default: 'my-bucket'
  InstanceName:
    Type: String
    Default: 'my-instance'
  ImageId:
    Type: String
    Default: 'ami-4af5022c' # amazon linux
  InstanceType:
    Type: String
    Default: 't2.micro'
  VolumeSize:
    Type: Number
    Default: 8
  KeyName:
    Type: String
    Default: 'my-instance-key'
  SecurityGroupName:
    Type: String
    Default: 'my-security-group'
  AdministratorIpAddress:
    Type: String
    Default: '116.94.0.124/32'

Resources:
  # Networking
  Vpc:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock:
        Ref: VpcCidrBlock
      EnableDnsSupport:
        Ref: EnableDnsSupport
      EnableDnsHostnames:
        Ref: EnableDnsHostnames
      InstanceTenancy: 'default'
      Tags:
        - Key: 'Name'
          Value:
            Ref: VpcName
  Subnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: Vpc
      CidrBlock:
        Ref: SubnetCidrBlock
      AvailabilityZone:
        Ref: SubnetAvailabilityZone
      MapPublicIpOnLaunch: 'true'
      Tags:
      - Key: Name
        Value:
          Ref: SubnetName
  SubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: Subnet
      RouteTableId:
        Ref: RouteTable
  GatewayToInternet:
    Type: "AWS::EC2::InternetGateway"
    Properties:
      Tags:
      - Key: 'Name'
        Value: 'internet-gateway'
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId:
        Ref: Vpc
      InternetGatewayId:
        Ref: GatewayToInternet
  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: Vpc
      Tags:
      - Key: 'Name'
        Value: 'vpc-route-table'
  Route:
    Type: AWS::EC2::Route
    DependsOn: GatewayToInternet
    Properties:
      RouteTableId:
        Ref: RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: GatewayToInternet
  # Security
  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: 'allow administrator ip address.'
      VpcId:
        Ref: Vpc
      SecurityGroupIngress:
      -
        IpProtocol: '-1'
        FromPort: "-1"
        ToPort: "-1"
        CidrIp:
          Ref: AdministratorIpAddress
      SecurityGroupEgress:
      -
        IpProtocol: "-1"
        FromPort: "-1"
        ToPort: "-1"
        CidrIp: "0.0.0.0/0"

  # Computing
  EC2Instance:
      Type: 'AWS::EC2::Instance'
      Properties:
        InstanceType:
          Ref: InstanceType
        ImageId:
          Ref: ImageId
        KeyName:
          Ref: KeyName
        BlockDeviceMappings:
          - DeviceName: '/dev/xvda'
            Ebs:
              VolumeType: 'gp2'
              DeleteOnTermination: 'true'
              VolumeSize:
                Ref: VolumeSize
        SubnetId:
          Ref: Subnet
        SecurityGroupIds:
        -
          Ref: SecurityGroup
        Tags:
        - Key: 'Name'
          Value:
            Ref: InstanceName
  S3Bucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      AccessControl: PublicRead
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: error.html
